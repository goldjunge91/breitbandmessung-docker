# Name des GitHub Actions Workflows
name: Build and Push Docker Image to Docker Hub

# Dieses Workflow wird bei einem Push auf den 'master'-Branch
# oder beim Erstellen eines neuen Tags ausgeführt.
on:
  push:
    branches: [ "master" ]
    tags: [ 'v*.*.*' ]

# Umgebungsvariablen, die im gesamten Workflow verfügbar sind.
# Ändere dies zu deinem Docker Hub Repository.
env:
  IMAGE_NAME: goldjunge491/breitbandmessung

jobs:
  build-and-push:
    # Der Job läuft auf einem von GitHub gehosteten Ubuntu-Runner.
    runs-on: ubuntu-latest

    steps:
      # 1. Schritt: Code aus dem Repository auschecken
      - name: Check out repository code
        uses: actions/checkout@v4

      # 2. Schritt: Docker-Metadaten extrahieren (z.B. Tags)
      # Diese Action erstellt automatisch Tags für das Docker-Image.
      # z.B. 'latest' für den master-Branch und Versionsnummern für Git-Tags.
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          flavor: |
            latest=true

      # 3. Schritt: Docker Buildx einrichten (für Multi-Architektur-Builds)
      # Obwohl ARM nicht unterstützt wird, ist dies eine bewährte Vorgehensweise.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Schritt: Bei Docker Hub anmelden
      # Verwendet die Secrets, die du in den GitHub-Einstellungen hinterlegst.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Schritt: Docker-Image bauen und auf Docker Hub hochladen
      # Dieser Schritt kombiniert den Build- und den Push-Vorgang.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # Tags, die von der 'metadata-action' im 2. Schritt generiert wurden.
          tags: ${{ steps.meta.outputs.tags }}
          # Labels, die von der 'metadata-action' generiert wurden.
          labels: ${{ steps.meta.outputs.labels }}